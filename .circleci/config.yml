version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "triggering rollback"
          # command: |
          #   aws cloudformation delete-stack --stack-name udapeople-fe-${CIRCLE_SHA1:0:7}
          #   aws cloudformation delete-stack --stack-name udapeople-be-${CIRCLE_SHA1:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            echo "triggering migration rollback"
          # command: |
          #   SUCCESS = $(curl -H "token: $MEMSTASH_TOKEN" --request GET https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID}-migration-success)
          #   if(( $SUCCESS==1 )); 
          #   then
          #     cd ~/project/backend
          #     npm install
          #     npm run migrations:revert
          #   fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [cache-frontend-build]
      - run: | 
          cd frontend
          sudo npm install
          sudo npm install -g npm-install-peers
          npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: cache-frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [cache-backend-build]
      - run: |
          cd backend
          sudo npm install
          sudo npm install -g npm-install-peers
          npm run build
          ls -a
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/dist
      - save_cache:
          paths: [backend/node_modules]
          key: cache-backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [cache-frontend-build]
      - run: | 
          cd frontend
          npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [cache-backend-build]
      - run: | 
          cd backend
          npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [cache-frontend-build]
      - run: | 
          cd frontend
          npm install
          npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [cache-backend-build]
      - run: | 
          cd backend
          npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-${CIRCLE_SHA1:0:7} \
              --stack-name udapeople-be-${CIRCLE_SHA1:0:7} \
              --parameter-overrides ID=${CIRCLE_SHA1:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-${CIRCLE_SHA1:0:7} \
              --stack-name udapeople-fe-${CIRCLE_SHA1:0:7} \
              --parameter-overrides ID=${CIRCLE_SHA1:0:7}
      - run:
          name: Add back-end ip to ansible inventory and store it to memcache
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-${CIRCLE_SHA1:0:7}" \
              --output text > host.temp
            echo $(cat host.temp) >> .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: $MEMSTASH_TOKEN" --request PUT --data "$(cat host.temp)" https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID}-host
            curl -H "Content-Type: text/plain" -H "token: $MEMSTASH_TOKEN" --request PUT --data "$(cat .circleci/ansible/inventory.txt)" https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID}-inventory

            echo "double check stored values"
            curl -H "token: $MEMSTASH_TOKEN" --request GET https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID}-inventory > inventory2.txt
            cat inventory2.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment  

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["$SSH_FINGERPRINT"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl 
            apk add --update ansible
      # - run:
      #     name: Configure server
      #     command: |
      #       cd ./.circleci/ansible
      #       curl -H "token: $MEMSTASH_TOKEN" --request GET https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID}-inventory > inventory.txt
      #       ansible-playbook -i inventory.txt configure-server.yml
      - run:
          name: Configure server
          command: |
            cd ./.circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [cache-backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > migrations.log
            grep "has been executed successfully" migrations.log || true
      - run:
          name: Send migration results to memstash
          command: |
            curl -H "Content-Type: text/plain" -H "token: $MEMSTASH_TOKEN" --request PUT --data "true" https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID}-migration-success
      - destroy-environment

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [cache-frontend-build]
      # - run:
      #     name: Get backend url
      #     command: |
      #       aws ec2 describe-instances \
      #         --query 'Reservations[*].Instances[*].PublicIpAddress' \
      #         --filters "Name=tag:project,Values=udapeople-${CIRCLE_SHA1:0:7}" \
      #         --output text >> be-url.temp
      #       export BACKEND_IP=$(cat be-url.temp)
      #       export API_URL="https://${BACKEND_IP}:3030"
      #       echo "${API_URL}"
      - run:
          name: Get backend url
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-4b77c2b" \
              --output text >> be-url.temp
            export BACKEND_IP=$(cat be-url.temp)
            export API_URL="https://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_14.x | bash -
            yum -y install nodejs
      # - run:
      #     name: Deploy frontend objects
      #     command: |
      #       cd frontend
      #       npm run build
      #       aws s3 sync ./dist s3://udapeople-${CIRCLE_SHA1:0:7} --delete
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            aws s3 sync ./dist s3://udapeople-4b77c2b --delete
      - destroy-environment
      - revert-migrations   
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - restore_cache:
          keys: [cache-backend-build]
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["$SSH_FINGERPRINT"]
      - run:
          name: Install dependencies
          command: |
            apk add --update curl 
            apk add --update ansible 
      - run:
          name: Deploy backend
          # command: |
          #   cp -r ./backend .circleci/ansible/roles/deploy/files
          #   cd .circleci/ansible
          #   curl -H "token: $MEMSTASH_TOKEN" --request GET https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID}-inventory > inventory.txt
          #   ansible-playbook -i inventory.txt -v deploy-backend.yml
          command: |
            ls -a ./backend
            cp -r ./backend .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            echo "ec2-3-89-74-77.compute-1.amazonaws.com" >> inventory.txt
            ansible-playbook -i inventory.txt -v deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
      - run:
          name: Get backend & frontend url
          # command: |
          #   curl -H "token: $MEMSTASH_TOKEN" --request GET https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID}-host > be_url.temp
          #   echo "http://udapeople-${CIRCLE_SHA1:0:7}.s3-website-us-east-1.amazonaws.com" > fe_url.temp
          #   export BACKEND_URL=$(cat host.temp)
          command: |
            echo "ec2-3-89-74-77.compute-1.amazonaws.com" > be_url.temp
            echo "http://udapeople-4b77c2b.s3-website-us-east-1.amazonaws.com" > fe_url.temp
      - run:
          name: Backend smoke test.
          command: |
            if curl -s $(cat be_url.temp):3030/api/status | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            if curl -s $(cat fe_url.temp) | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      - run:
          name: Update cloudfront distribution
          # command: |
          #   aws cloudformation deploy \
          #     --template-file .circleci/files/cloudfront.yml \
          #     --tags project=udapeople \
          #     --stack-name udapeople-cloudfront \
          #     --parameter-overrides WorkflowID=${CIRCLE_SHA1:0:7}
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udapeople \
              --stack-name udapeople-cloudfront \
              --parameter-overrides WorkflowID=4b77c2b
      - destroy-environment
      - revert-migrations

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]
      # - test-frontend:
      #     requires: [build-frontend, scan-frontend]
      # - test-backend:
      #     requires: [build-backend, scan-backend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
          # requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      - smoke-test
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]